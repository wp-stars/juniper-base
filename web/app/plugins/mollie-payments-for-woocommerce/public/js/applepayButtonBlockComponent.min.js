/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/applePayError.js":
/*!***************************************!*\
  !*** ./resources/js/applePayError.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAppleErrors: () => (/* binding */ createAppleErrors)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createAppleErrors(errors) {
  var errorList = [];
  var _iterator = _createForOfIteratorHelper(errors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var error = _step.value;
      var _error$contactField = error.contactField,
        contactField = _error$contactField === void 0 ? null : _error$contactField,
        _error$code = error.code,
        code = _error$code === void 0 ? null : _error$code,
        _error$message = error.message,
        message = _error$message === void 0 ? null : _error$message;
      var appleError = contactField ? new ApplePayError(code, contactField, message) : new ApplePayError(code);
      errorList.push(appleError);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return errorList;
}

/***/ }),

/***/ "./resources/js/applePayRequest.js":
/*!*****************************************!*\
  !*** ./resources/js/applePayRequest.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   request: () => (/* binding */ request)
/* harmony export */ });
var request = function request(countryCode, currencyCode, totalLabel, subtotal) {
  return {
    countryCode: countryCode,
    currencyCode: currencyCode,
    supportedNetworks: ['amex', 'maestro', 'masterCard', 'visa', 'vPay'],
    merchantCapabilities: ['supports3DS'],
    shippingType: 'shipping',
    requiredBillingContactFields: ['postalAddress', 'email'],
    requiredShippingContactFields: ['postalAddress', 'email'],
    total: {
      label: totalLabel,
      amount: subtotal,
      type: 'final'
    }
  };
};

/***/ }),

/***/ "./resources/js/maybeShowApplePayButton.js":
/*!*************************************************!*\
  !*** ./resources/js/maybeShowApplePayButton.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   maybeShowButton: () => (/* binding */ maybeShowButton)
/* harmony export */ });
var maybeShowButton = function maybeShowButton() {
  var _window = window,
    ApplePaySession = _window.ApplePaySession;
  var applePayMethodElement = document.querySelector('#mollie-applepayDirect-button');
  var canShowButton = applePayMethodElement && ApplePaySession && ApplePaySession.canMakePayments();
  if (!canShowButton) {
    return false;
  }
  var button = document.createElement('button');
  button.setAttribute('id', 'mollie_applepay_button');
  button.classList.add('apple-pay-button');
  button.classList.add('apple-pay-button-black');
  applePayMethodElement.appendChild(button);
  return true;
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************************************!*\
  !*** ./resources/js/applepayButtonBlockComponent.js ***!
  \******************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _maybeShowApplePayButton_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybeShowApplePayButton.js */ "./resources/js/maybeShowApplePayButton.js");
/* harmony import */ var _applePayRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./applePayRequest */ "./resources/js/applePayRequest.js");
/* harmony import */ var _applePayError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./applePayError */ "./resources/js/applePayError.js");



(function (_ref) {
  var mollieApplePayBlockDataCart = _ref.mollieApplePayBlockDataCart;
  if (mollieApplePayBlockDataCart.length === 0) {
    return;
  }
  var _mollieApplePayBlockD = mollieApplePayBlockDataCart.product,
    _mollieApplePayBlockD2 = _mollieApplePayBlockD.needShipping,
    needShipping = _mollieApplePayBlockD2 === void 0 ? true : _mollieApplePayBlockD2,
    subtotal = _mollieApplePayBlockD.subtotal,
    _mollieApplePayBlockD3 = mollieApplePayBlockDataCart.shop,
    countryCode = _mollieApplePayBlockD3.countryCode,
    _mollieApplePayBlockD4 = _mollieApplePayBlockD3.currencyCode,
    currencyCode = _mollieApplePayBlockD4 === void 0 ? 'EUR' : _mollieApplePayBlockD4,
    _mollieApplePayBlockD5 = _mollieApplePayBlockD3.totalLabel,
    totalLabel = _mollieApplePayBlockD5 === void 0 ? '' : _mollieApplePayBlockD5,
    buttonMarkup = mollieApplePayBlockDataCart.buttonMarkup,
    ajaxUrl = mollieApplePayBlockDataCart.ajaxUrl;
  var registerPlugin = wp.plugins.registerPlugin;
  var ExperimentalOrderMeta = wc.blocksCheckout.ExperimentalOrderMeta;
  var ApplePayButtonComponent = function ApplePayButtonComponent(_ref2) {
    var cart = _ref2.cart,
      extensions = _ref2.extensions;
    return /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: buttonMarkup
      }
    });
  };
  var MollieApplePayButtonCart = function MollieApplePayButtonCart() {
    return /*#__PURE__*/React.createElement(ExperimentalOrderMeta, null, /*#__PURE__*/React.createElement(ApplePayButtonComponent, null));
  };
  registerPlugin('mollie-applepay-block-button', {
    render: function render() {
      return /*#__PURE__*/React.createElement(MollieApplePayButtonCart, null);
    },
    scope: 'woocommerce-checkout'
  });
  setTimeout(function () {
    if (!(0,_maybeShowApplePayButton_js__WEBPACK_IMPORTED_MODULE_0__.maybeShowButton)()) {
      return;
    }
    var nonce = document.getElementById("woocommerce-process-checkout-nonce").value;
    var updatedContactInfo = [];
    var selectedShippingMethod = [];
    var redirectionUrl = '';
    var applePaySession = function applePaySession() {
      var session = new ApplePaySession(3, (0,_applePayRequest__WEBPACK_IMPORTED_MODULE_1__.request)(countryCode, currencyCode, totalLabel, subtotal));
      session.begin();
      session.onshippingmethodselected = function (event) {
        var _this = this;
        jQuery.ajax({
          url: ajaxUrl,
          method: 'POST',
          data: {
            action: 'mollie_apple_pay_update_shipping_method',
            shippingMethod: event.shippingMethod,
            callerPage: 'cart',
            simplifiedContact: updatedContactInfo,
            'woocommerce-process-checkout-nonce': nonce
          },
          complete: function complete(jqXHR, textStatus) {},
          success: function success(applePayShippingMethodUpdate, textStatus, jqXHR) {
            var response = applePayShippingMethodUpdate.data;
            selectedShippingMethod = event.shippingMethod;
            if (applePayShippingMethodUpdate.success === false) {
              response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_2__.createAppleErrors)(response.errors);
            }
            _this.completeShippingMethodSelection(response);
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            console.warn(textStatus, errorThrown);
            session.abort();
          }
        });
      };
      session.onshippingcontactselected = function (event) {
        var _this2 = this;
        jQuery.ajax({
          url: ajaxUrl,
          method: 'POST',
          data: {
            action: 'mollie_apple_pay_update_shipping_contact',
            simplifiedContact: event.shippingContact,
            callerPage: 'cart',
            needShipping: needShipping,
            'woocommerce-process-checkout-nonce': nonce
          },
          complete: function complete(jqXHR, textStatus) {},
          success: function success(applePayShippingContactUpdate, textStatus, jqXHR) {
            var response = applePayShippingContactUpdate.data;
            updatedContactInfo = event.shippingContact;
            if (applePayShippingContactUpdate.success === false) {
              response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_2__.createAppleErrors)(response.errors);
            }
            if (response.newShippingMethods) {
              selectedShippingMethod = response.newShippingMethods[0];
            }
            _this2.completeShippingContactSelection(response);
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            console.warn(textStatus, errorThrown);
            session.abort();
          }
        });
      };
      session.onvalidatemerchant = function (applePayValidateMerchantEvent) {
        jQuery.ajax({
          url: ajaxUrl,
          method: 'POST',
          data: {
            action: 'mollie_apple_pay_validation',
            validationUrl: applePayValidateMerchantEvent.validationURL,
            'woocommerce-process-checkout-nonce': nonce
          },
          complete: function complete(jqXHR, textStatus) {},
          success: function success(merchantSession, textStatus, jqXHR) {
            if (merchantSession.success === true) {
              session.completeMerchantValidation(JSON.parse(merchantSession.data));
            } else {
              console.warn(merchantSession.data);
              session.abort();
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            console.warn(textStatus, errorThrown);
            session.abort();
          }
        });
      };
      session.onpaymentauthorized = function (ApplePayPayment) {
        var _ApplePayPayment$paym = ApplePayPayment.payment,
          billingContact = _ApplePayPayment$paym.billingContact,
          shippingContact = _ApplePayPayment$paym.shippingContact;
        jQuery.ajax({
          url: ajaxUrl,
          method: 'POST',
          data: {
            action: 'mollie_apple_pay_create_order_cart',
            shippingContact: ApplePayPayment.payment.shippingContact,
            billingContact: ApplePayPayment.payment.billingContact,
            token: ApplePayPayment.payment.token,
            shippingMethod: selectedShippingMethod,
            'mollie-payments-for-woocommerce_issuer_applepay': 'applepay',
            'woocommerce-process-checkout-nonce': nonce,
            'billing_first_name': billingContact.givenName || '',
            'billing_last_name': billingContact.familyName || '',
            'billing_company': '',
            'billing_country': billingContact.countryCode || '',
            'billing_address_1': billingContact.addressLines[0] || '',
            'billing_address_2': billingContact.addressLines[1] || '',
            'billing_postcode': billingContact.postalCode || '',
            'billing_city': billingContact.locality || '',
            'billing_state': billingContact.administrativeArea || '',
            'billing_phone': billingContact.phoneNumber || '000000000000',
            'billing_email': shippingContact.emailAddress || '',
            'shipping_first_name': shippingContact.givenName || '',
            'shipping_last_name': shippingContact.familyName || '',
            'shipping_company': '',
            'shipping_country': shippingContact.countryCode || '',
            'shipping_address_1': shippingContact.addressLines[0] || '',
            'shipping_address_2': shippingContact.addressLines[1] || '',
            'shipping_postcode': shippingContact.postalCode || '',
            'shipping_city': shippingContact.locality || '',
            'shipping_state': shippingContact.administrativeArea || '',
            'shipping_phone': shippingContact.phoneNumber || '000000000000',
            'shipping_email': shippingContact.emailAddress || '',
            'order_comments': '',
            'payment_method': 'mollie_wc_gateway_applepay',
            '_wp_http_referer': '/?wc-ajax=update_order_review'
          },
          complete: function complete(jqXHR, textStatus) {},
          success: function success(authorizationResult, textStatus, jqXHR) {
            var result = authorizationResult.data;
            if (authorizationResult.success === true) {
              redirectionUrl = result['returnUrl'];
              session.completePayment(result['responseToApple']);
              window.location.href = redirectionUrl;
            } else {
              result.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_2__.createAppleErrors)(result.errors);
              session.completePayment(result);
            }
          },
          error: function error(jqXHR, textStatus, errorThrown) {
            console.warn(textStatus, errorThrown);
            session.abort();
          }
        });
      };
    };
    document.querySelector('#mollie_applepay_button').addEventListener('click', function (evt) {
      applePaySession();
    });
  }, 2000);
})(window);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,